// Generated by gencpp from file srmauv_msgs/controller.msg
// DO NOT EDIT!


#ifndef SRMAUV_MSGS_MESSAGE_CONTROLLER_H
#define SRMAUV_MSGS_MESSAGE_CONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srmauv_msgs
{
template <class ContainerAllocator>
struct controller_
{
  typedef controller_<ContainerAllocator> Type;

  controller_()
    : depth_input(0.0)
    , depth_setpoint(0.0)
    , heading_input(0.0)
    , heading_setpoint(0.0)
    , sidemove_input(0.0)
    , sidemove_setpoint(0.0)
    , forward_input(0.0)
    , forward_setpoint(0.0)
    , forward_vel_input(0.0)
    , forward_vel_setpoint(0.0)
    , sidemove_vel_input(0.0)
    , sidemove_vel_setpoint(0.0)
    , pitch_input(0.0)
    , pitch_setpoint(0.0)
    , roll_input(0.0)
    , roll_setpoint(0.0)  {
    }
  controller_(const ContainerAllocator& _alloc)
    : depth_input(0.0)
    , depth_setpoint(0.0)
    , heading_input(0.0)
    , heading_setpoint(0.0)
    , sidemove_input(0.0)
    , sidemove_setpoint(0.0)
    , forward_input(0.0)
    , forward_setpoint(0.0)
    , forward_vel_input(0.0)
    , forward_vel_setpoint(0.0)
    , sidemove_vel_input(0.0)
    , sidemove_vel_setpoint(0.0)
    , pitch_input(0.0)
    , pitch_setpoint(0.0)
    , roll_input(0.0)
    , roll_setpoint(0.0)  {
  (void)_alloc;
    }



   typedef float _depth_input_type;
  _depth_input_type depth_input;

   typedef float _depth_setpoint_type;
  _depth_setpoint_type depth_setpoint;

   typedef float _heading_input_type;
  _heading_input_type heading_input;

   typedef float _heading_setpoint_type;
  _heading_setpoint_type heading_setpoint;

   typedef float _sidemove_input_type;
  _sidemove_input_type sidemove_input;

   typedef float _sidemove_setpoint_type;
  _sidemove_setpoint_type sidemove_setpoint;

   typedef float _forward_input_type;
  _forward_input_type forward_input;

   typedef float _forward_setpoint_type;
  _forward_setpoint_type forward_setpoint;

   typedef float _forward_vel_input_type;
  _forward_vel_input_type forward_vel_input;

   typedef float _forward_vel_setpoint_type;
  _forward_vel_setpoint_type forward_vel_setpoint;

   typedef float _sidemove_vel_input_type;
  _sidemove_vel_input_type sidemove_vel_input;

   typedef float _sidemove_vel_setpoint_type;
  _sidemove_vel_setpoint_type sidemove_vel_setpoint;

   typedef float _pitch_input_type;
  _pitch_input_type pitch_input;

   typedef float _pitch_setpoint_type;
  _pitch_setpoint_type pitch_setpoint;

   typedef float _roll_input_type;
  _roll_input_type roll_input;

   typedef float _roll_setpoint_type;
  _roll_setpoint_type roll_setpoint;




  typedef boost::shared_ptr< ::srmauv_msgs::controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srmauv_msgs::controller_<ContainerAllocator> const> ConstPtr;

}; // struct controller_

typedef ::srmauv_msgs::controller_<std::allocator<void> > controller;

typedef boost::shared_ptr< ::srmauv_msgs::controller > controllerPtr;
typedef boost::shared_ptr< ::srmauv_msgs::controller const> controllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srmauv_msgs::controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srmauv_msgs::controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace srmauv_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'srmauv_msgs': ['/home/parth/sedna/src/srmauv_msgs/msg', '/home/parth/sedna/devel/share/srmauv_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::srmauv_msgs::controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srmauv_msgs::controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srmauv_msgs::controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srmauv_msgs::controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srmauv_msgs::controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srmauv_msgs::controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srmauv_msgs::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a48ec5265dd3ea836147fd3cdfcadf2";
  }

  static const char* value(const ::srmauv_msgs::controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a48ec5265dd3ea8ULL;
  static const uint64_t static_value2 = 0x36147fd3cdfcadf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::srmauv_msgs::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srmauv_msgs/controller";
  }

  static const char* value(const ::srmauv_msgs::controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srmauv_msgs::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 depth_input\n\
float32 depth_setpoint\n\
float32 heading_input\n\
float32 heading_setpoint\n\
float32 sidemove_input\n\
float32 sidemove_setpoint\n\
float32 forward_input\n\
float32 forward_setpoint\n\
float32 forward_vel_input\n\
float32 forward_vel_setpoint\n\
float32 sidemove_vel_input\n\
float32 sidemove_vel_setpoint\n\
float32 pitch_input\n\
float32 pitch_setpoint\n\
float32 roll_input\n\
float32 roll_setpoint \n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::srmauv_msgs::controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srmauv_msgs::controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.depth_input);
      stream.next(m.depth_setpoint);
      stream.next(m.heading_input);
      stream.next(m.heading_setpoint);
      stream.next(m.sidemove_input);
      stream.next(m.sidemove_setpoint);
      stream.next(m.forward_input);
      stream.next(m.forward_setpoint);
      stream.next(m.forward_vel_input);
      stream.next(m.forward_vel_setpoint);
      stream.next(m.sidemove_vel_input);
      stream.next(m.sidemove_vel_setpoint);
      stream.next(m.pitch_input);
      stream.next(m.pitch_setpoint);
      stream.next(m.roll_input);
      stream.next(m.roll_setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srmauv_msgs::controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srmauv_msgs::controller_<ContainerAllocator>& v)
  {
    s << indent << "depth_input: ";
    Printer<float>::stream(s, indent + "  ", v.depth_input);
    s << indent << "depth_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.depth_setpoint);
    s << indent << "heading_input: ";
    Printer<float>::stream(s, indent + "  ", v.heading_input);
    s << indent << "heading_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.heading_setpoint);
    s << indent << "sidemove_input: ";
    Printer<float>::stream(s, indent + "  ", v.sidemove_input);
    s << indent << "sidemove_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.sidemove_setpoint);
    s << indent << "forward_input: ";
    Printer<float>::stream(s, indent + "  ", v.forward_input);
    s << indent << "forward_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.forward_setpoint);
    s << indent << "forward_vel_input: ";
    Printer<float>::stream(s, indent + "  ", v.forward_vel_input);
    s << indent << "forward_vel_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.forward_vel_setpoint);
    s << indent << "sidemove_vel_input: ";
    Printer<float>::stream(s, indent + "  ", v.sidemove_vel_input);
    s << indent << "sidemove_vel_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.sidemove_vel_setpoint);
    s << indent << "pitch_input: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_input);
    s << indent << "pitch_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_setpoint);
    s << indent << "roll_input: ";
    Printer<float>::stream(s, indent + "  ", v.roll_input);
    s << indent << "roll_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.roll_setpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRMAUV_MSGS_MESSAGE_CONTROLLER_H
