// Generated by gencpp from file srmauv_msgs/missions.msg
// DO NOT EDIT!


#ifndef SRMAUV_MSGS_MESSAGE_MISSIONS_H
#define SRMAUV_MSGS_MESSAGE_MISSIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srmauv_msgs
{
template <class ContainerAllocator>
struct missions_
{
  typedef missions_<ContainerAllocator> Type;

  missions_()
    : guide(false)
    , buoy_red(false)
    , buoy_green(false)
    , gate(false)
    , style(false)
    , torpedo_approach(false)
    , torpedo_lid(false)
    , torpedo_primary(false)
    , torpedo_secondary(false)
    , dropper_approach(false)
    , dropper_lid(false)
    , dropper_primary(false)
    , dropper_secondary(false)  {
    }
  missions_(const ContainerAllocator& _alloc)
    : guide(false)
    , buoy_red(false)
    , buoy_green(false)
    , gate(false)
    , style(false)
    , torpedo_approach(false)
    , torpedo_lid(false)
    , torpedo_primary(false)
    , torpedo_secondary(false)
    , dropper_approach(false)
    , dropper_lid(false)
    , dropper_primary(false)
    , dropper_secondary(false)  {
  (void)_alloc;
    }



   typedef uint8_t _guide_type;
  _guide_type guide;

   typedef uint8_t _buoy_red_type;
  _buoy_red_type buoy_red;

   typedef uint8_t _buoy_green_type;
  _buoy_green_type buoy_green;

   typedef uint8_t _gate_type;
  _gate_type gate;

   typedef uint8_t _style_type;
  _style_type style;

   typedef uint8_t _torpedo_approach_type;
  _torpedo_approach_type torpedo_approach;

   typedef uint8_t _torpedo_lid_type;
  _torpedo_lid_type torpedo_lid;

   typedef uint8_t _torpedo_primary_type;
  _torpedo_primary_type torpedo_primary;

   typedef uint8_t _torpedo_secondary_type;
  _torpedo_secondary_type torpedo_secondary;

   typedef uint8_t _dropper_approach_type;
  _dropper_approach_type dropper_approach;

   typedef uint8_t _dropper_lid_type;
  _dropper_lid_type dropper_lid;

   typedef uint8_t _dropper_primary_type;
  _dropper_primary_type dropper_primary;

   typedef uint8_t _dropper_secondary_type;
  _dropper_secondary_type dropper_secondary;




  typedef boost::shared_ptr< ::srmauv_msgs::missions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srmauv_msgs::missions_<ContainerAllocator> const> ConstPtr;

}; // struct missions_

typedef ::srmauv_msgs::missions_<std::allocator<void> > missions;

typedef boost::shared_ptr< ::srmauv_msgs::missions > missionsPtr;
typedef boost::shared_ptr< ::srmauv_msgs::missions const> missionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srmauv_msgs::missions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srmauv_msgs::missions_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace srmauv_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'srmauv_msgs': ['/home/parth/sedna/src/srmauv_msgs/msg', '/home/parth/sedna/devel/share/srmauv_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::srmauv_msgs::missions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srmauv_msgs::missions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srmauv_msgs::missions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srmauv_msgs::missions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srmauv_msgs::missions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srmauv_msgs::missions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srmauv_msgs::missions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60a02507839d17c11e7e6d3d0d0434e9";
  }

  static const char* value(const ::srmauv_msgs::missions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60a02507839d17c1ULL;
  static const uint64_t static_value2 = 0x1e7e6d3d0d0434e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::srmauv_msgs::missions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srmauv_msgs/missions";
  }

  static const char* value(const ::srmauv_msgs::missions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srmauv_msgs::missions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool guide\n\
bool buoy_red\n\
bool buoy_green\n\
bool gate\n\
bool style\n\
\n\
bool torpedo_approach\n\
bool torpedo_lid\n\
bool torpedo_primary\n\
bool torpedo_secondary\n\
\n\
bool dropper_approach\n\
bool dropper_lid\n\
bool dropper_primary\n\
bool dropper_secondary\n\
";
  }

  static const char* value(const ::srmauv_msgs::missions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srmauv_msgs::missions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.guide);
      stream.next(m.buoy_red);
      stream.next(m.buoy_green);
      stream.next(m.gate);
      stream.next(m.style);
      stream.next(m.torpedo_approach);
      stream.next(m.torpedo_lid);
      stream.next(m.torpedo_primary);
      stream.next(m.torpedo_secondary);
      stream.next(m.dropper_approach);
      stream.next(m.dropper_lid);
      stream.next(m.dropper_primary);
      stream.next(m.dropper_secondary);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct missions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srmauv_msgs::missions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srmauv_msgs::missions_<ContainerAllocator>& v)
  {
    s << indent << "guide: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.guide);
    s << indent << "buoy_red: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buoy_red);
    s << indent << "buoy_green: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buoy_green);
    s << indent << "gate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gate);
    s << indent << "style: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.style);
    s << indent << "torpedo_approach: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torpedo_approach);
    s << indent << "torpedo_lid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torpedo_lid);
    s << indent << "torpedo_primary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torpedo_primary);
    s << indent << "torpedo_secondary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torpedo_secondary);
    s << indent << "dropper_approach: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dropper_approach);
    s << indent << "dropper_lid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dropper_lid);
    s << indent << "dropper_primary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dropper_primary);
    s << indent << "dropper_secondary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dropper_secondary);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRMAUV_MSGS_MESSAGE_MISSIONS_H
