# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srmauv_msgs/goal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class goal(genpy.Message):
  _md5sum = "e3a6bb0117e9e52cd5f2550dc62beb5b"
  _type = "srmauv_msgs/goal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool goDepth
bool goPitch
bool goRoll
bool goHeading

int16 depth
int16 pitch
int16 roll
int16 heading
"""
  __slots__ = ['goDepth','goPitch','goRoll','goHeading','depth','pitch','roll','heading']
  _slot_types = ['bool','bool','bool','bool','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goDepth,goPitch,goRoll,goHeading,depth,pitch,roll,heading

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(goal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.goDepth is None:
        self.goDepth = False
      if self.goPitch is None:
        self.goPitch = False
      if self.goRoll is None:
        self.goRoll = False
      if self.goHeading is None:
        self.goHeading = False
      if self.depth is None:
        self.depth = 0
      if self.pitch is None:
        self.pitch = 0
      if self.roll is None:
        self.roll = 0
      if self.heading is None:
        self.heading = 0
    else:
      self.goDepth = False
      self.goPitch = False
      self.goRoll = False
      self.goHeading = False
      self.depth = 0
      self.pitch = 0
      self.roll = 0
      self.heading = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B4h.pack(_x.goDepth, _x.goPitch, _x.goRoll, _x.goHeading, _x.depth, _x.pitch, _x.roll, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.goDepth, _x.goPitch, _x.goRoll, _x.goHeading, _x.depth, _x.pitch, _x.roll, _x.heading,) = _struct_4B4h.unpack(str[start:end])
      self.goDepth = bool(self.goDepth)
      self.goPitch = bool(self.goPitch)
      self.goRoll = bool(self.goRoll)
      self.goHeading = bool(self.goHeading)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B4h.pack(_x.goDepth, _x.goPitch, _x.goRoll, _x.goHeading, _x.depth, _x.pitch, _x.roll, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.goDepth, _x.goPitch, _x.goRoll, _x.goHeading, _x.depth, _x.pitch, _x.roll, _x.heading,) = _struct_4B4h.unpack(str[start:end])
      self.goDepth = bool(self.goDepth)
      self.goPitch = bool(self.goPitch)
      self.goRoll = bool(self.goRoll)
      self.goHeading = bool(self.goHeading)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B4h = struct.Struct("<4B4h")
