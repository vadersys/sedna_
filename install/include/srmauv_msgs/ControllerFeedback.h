// Generated by gencpp from file srmauv_msgs/ControllerFeedback.msg
// DO NOT EDIT!


#ifndef SRMAUV_MSGS_MESSAGE_CONTROLLERFEEDBACK_H
#define SRMAUV_MSGS_MESSAGE_CONTROLLERFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srmauv_msgs
{
template <class ContainerAllocator>
struct ControllerFeedback_
{
  typedef ControllerFeedback_<ContainerAllocator> Type;

  ControllerFeedback_()
    : heading_error(0.0)
    , forward_error(0.0)
    , sidemove_error(0.0)
    , depth_error(0.0)  {
    }
  ControllerFeedback_(const ContainerAllocator& _alloc)
    : heading_error(0.0)
    , forward_error(0.0)
    , sidemove_error(0.0)
    , depth_error(0.0)  {
  (void)_alloc;
    }



   typedef float _heading_error_type;
  _heading_error_type heading_error;

   typedef float _forward_error_type;
  _forward_error_type forward_error;

   typedef float _sidemove_error_type;
  _sidemove_error_type sidemove_error;

   typedef float _depth_error_type;
  _depth_error_type depth_error;




  typedef boost::shared_ptr< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerFeedback_

typedef ::srmauv_msgs::ControllerFeedback_<std::allocator<void> > ControllerFeedback;

typedef boost::shared_ptr< ::srmauv_msgs::ControllerFeedback > ControllerFeedbackPtr;
typedef boost::shared_ptr< ::srmauv_msgs::ControllerFeedback const> ControllerFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace srmauv_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'srmauv_msgs': ['/home/parth/sedna/src/srmauv_msgs/msg', '/home/parth/sedna/devel/share/srmauv_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57014ba2229f774a8329bf9d01b13d9a";
  }

  static const char* value(const ::srmauv_msgs::ControllerFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57014ba2229f774aULL;
  static const uint64_t static_value2 = 0x8329bf9d01b13d9aULL;
};

template<class ContainerAllocator>
struct DataType< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srmauv_msgs/ControllerFeedback";
  }

  static const char* value(const ::srmauv_msgs::ControllerFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
#feedback definition\n\
float32 heading_error\n\
float32 forward_error\n\
float32 sidemove_error\n\
float32 depth_error\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::srmauv_msgs::ControllerFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading_error);
      stream.next(m.forward_error);
      stream.next(m.sidemove_error);
      stream.next(m.depth_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ControllerFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srmauv_msgs::ControllerFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srmauv_msgs::ControllerFeedback_<ContainerAllocator>& v)
  {
    s << indent << "heading_error: ";
    Printer<float>::stream(s, indent + "  ", v.heading_error);
    s << indent << "forward_error: ";
    Printer<float>::stream(s, indent + "  ", v.forward_error);
    s << indent << "sidemove_error: ";
    Printer<float>::stream(s, indent + "  ", v.sidemove_error);
    s << indent << "depth_error: ";
    Printer<float>::stream(s, indent + "  ", v.depth_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRMAUV_MSGS_MESSAGE_CONTROLLERFEEDBACK_H
