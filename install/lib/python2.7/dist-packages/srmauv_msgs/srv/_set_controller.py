# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srmauv_msgs/set_controllerRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class set_controllerRequest(genpy.Message):
  _md5sum = "2038e9fb629dff5329fbf0743e7ea242"
  _type = "srmauv_msgs/set_controllerRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool forward
bool sidemove
bool heading
bool depth
bool pitch
bool roll
bool topside
bool navigation
bool forward_vel
bool sidemove_vel

"""
  __slots__ = ['forward','sidemove','heading','depth','pitch','roll','topside','navigation','forward_vel','sidemove_vel']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       forward,sidemove,heading,depth,pitch,roll,topside,navigation,forward_vel,sidemove_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_controllerRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.forward is None:
        self.forward = False
      if self.sidemove is None:
        self.sidemove = False
      if self.heading is None:
        self.heading = False
      if self.depth is None:
        self.depth = False
      if self.pitch is None:
        self.pitch = False
      if self.roll is None:
        self.roll = False
      if self.topside is None:
        self.topside = False
      if self.navigation is None:
        self.navigation = False
      if self.forward_vel is None:
        self.forward_vel = False
      if self.sidemove_vel is None:
        self.sidemove_vel = False
    else:
      self.forward = False
      self.sidemove = False
      self.heading = False
      self.depth = False
      self.pitch = False
      self.roll = False
      self.topside = False
      self.navigation = False
      self.forward_vel = False
      self.sidemove_vel = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10B.pack(_x.forward, _x.sidemove, _x.heading, _x.depth, _x.pitch, _x.roll, _x.topside, _x.navigation, _x.forward_vel, _x.sidemove_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.forward, _x.sidemove, _x.heading, _x.depth, _x.pitch, _x.roll, _x.topside, _x.navigation, _x.forward_vel, _x.sidemove_vel,) = _struct_10B.unpack(str[start:end])
      self.forward = bool(self.forward)
      self.sidemove = bool(self.sidemove)
      self.heading = bool(self.heading)
      self.depth = bool(self.depth)
      self.pitch = bool(self.pitch)
      self.roll = bool(self.roll)
      self.topside = bool(self.topside)
      self.navigation = bool(self.navigation)
      self.forward_vel = bool(self.forward_vel)
      self.sidemove_vel = bool(self.sidemove_vel)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10B.pack(_x.forward, _x.sidemove, _x.heading, _x.depth, _x.pitch, _x.roll, _x.topside, _x.navigation, _x.forward_vel, _x.sidemove_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.forward, _x.sidemove, _x.heading, _x.depth, _x.pitch, _x.roll, _x.topside, _x.navigation, _x.forward_vel, _x.sidemove_vel,) = _struct_10B.unpack(str[start:end])
      self.forward = bool(self.forward)
      self.sidemove = bool(self.sidemove)
      self.heading = bool(self.heading)
      self.depth = bool(self.depth)
      self.pitch = bool(self.pitch)
      self.roll = bool(self.roll)
      self.topside = bool(self.topside)
      self.navigation = bool(self.navigation)
      self.forward_vel = bool(self.forward_vel)
      self.sidemove_vel = bool(self.sidemove_vel)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10B = struct.Struct("<10B")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srmauv_msgs/set_controllerResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class set_controllerResponse(genpy.Message):
  _md5sum = "9d8061d2347621a6ed88451e28811cc7"
  _type = "srmauv_msgs/set_controllerResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool complete

"""
  __slots__ = ['complete']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       complete

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_controllerResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.complete is None:
        self.complete = False
    else:
      self.complete = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.complete))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.complete,) = _struct_B.unpack(str[start:end])
      self.complete = bool(self.complete)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.complete))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.complete,) = _struct_B.unpack(str[start:end])
      self.complete = bool(self.complete)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class set_controller(object):
  _type          = 'srmauv_msgs/set_controller'
  _md5sum = 'd5db543179e321d0f8a06feb429cfe4d'
  _request_class  = set_controllerRequest
  _response_class = set_controllerResponse
