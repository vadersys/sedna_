# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srmauv_msgs/compass_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class compass_data(genpy.Message):
  _md5sum = "841d1b2787d28092af29001166d7d2c4"
  _type = "srmauv_msgs/compass_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 yaw
float32 pitch
float32 roll
float32 ang_vel_z
float32 temperature
float32 Ax
float32 Ay
float32 Az
"""
  __slots__ = ['yaw','pitch','roll','ang_vel_z','temperature','Ax','Ay','Az']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       yaw,pitch,roll,ang_vel_z,temperature,Ax,Ay,Az

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(compass_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.ang_vel_z is None:
        self.ang_vel_z = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.Ax is None:
        self.Ax = 0.
      if self.Ay is None:
        self.Ay = 0.
      if self.Az is None:
        self.Az = 0.
    else:
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.ang_vel_z = 0.
      self.temperature = 0.
      self.Ax = 0.
      self.Ay = 0.
      self.Az = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.yaw, _x.pitch, _x.roll, _x.ang_vel_z, _x.temperature, _x.Ax, _x.Ay, _x.Az))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.yaw, _x.pitch, _x.roll, _x.ang_vel_z, _x.temperature, _x.Ax, _x.Ay, _x.Az,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.yaw, _x.pitch, _x.roll, _x.ang_vel_z, _x.temperature, _x.Ax, _x.Ay, _x.Az))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.yaw, _x.pitch, _x.roll, _x.ang_vel_z, _x.temperature, _x.Ax, _x.Ay, _x.Az,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
