# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srmauv_msgs/pid_info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import srmauv_msgs.msg
import std_msgs.msg

class pid_info(genpy.Message):
  _md5sum = "78380976b66601a9528770c55e37d58c"
  _type = "srmauv_msgs/pid_info"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header 
  string child_frame_id
ControlData forward
ControlData heading
ControlData sidemove
ControlData pitch
ControlData roll
ControlData depth








================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: srmauv_msgs/ControlData
float32 total
float32 p
float32 i
float32 d

"""
  __slots__ = ['header','child_frame_id','forward','heading','sidemove','pitch','roll','depth']
  _slot_types = ['std_msgs/Header','string','srmauv_msgs/ControlData','srmauv_msgs/ControlData','srmauv_msgs/ControlData','srmauv_msgs/ControlData','srmauv_msgs/ControlData','srmauv_msgs/ControlData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,child_frame_id,forward,heading,sidemove,pitch,roll,depth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pid_info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.child_frame_id is None:
        self.child_frame_id = ''
      if self.forward is None:
        self.forward = srmauv_msgs.msg.ControlData()
      if self.heading is None:
        self.heading = srmauv_msgs.msg.ControlData()
      if self.sidemove is None:
        self.sidemove = srmauv_msgs.msg.ControlData()
      if self.pitch is None:
        self.pitch = srmauv_msgs.msg.ControlData()
      if self.roll is None:
        self.roll = srmauv_msgs.msg.ControlData()
      if self.depth is None:
        self.depth = srmauv_msgs.msg.ControlData()
    else:
      self.header = std_msgs.msg.Header()
      self.child_frame_id = ''
      self.forward = srmauv_msgs.msg.ControlData()
      self.heading = srmauv_msgs.msg.ControlData()
      self.sidemove = srmauv_msgs.msg.ControlData()
      self.pitch = srmauv_msgs.msg.ControlData()
      self.roll = srmauv_msgs.msg.ControlData()
      self.depth = srmauv_msgs.msg.ControlData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_24f.pack(_x.forward.total, _x.forward.p, _x.forward.i, _x.forward.d, _x.heading.total, _x.heading.p, _x.heading.i, _x.heading.d, _x.sidemove.total, _x.sidemove.p, _x.sidemove.i, _x.sidemove.d, _x.pitch.total, _x.pitch.p, _x.pitch.i, _x.pitch.d, _x.roll.total, _x.roll.p, _x.roll.i, _x.roll.d, _x.depth.total, _x.depth.p, _x.depth.i, _x.depth.d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.forward is None:
        self.forward = srmauv_msgs.msg.ControlData()
      if self.heading is None:
        self.heading = srmauv_msgs.msg.ControlData()
      if self.sidemove is None:
        self.sidemove = srmauv_msgs.msg.ControlData()
      if self.pitch is None:
        self.pitch = srmauv_msgs.msg.ControlData()
      if self.roll is None:
        self.roll = srmauv_msgs.msg.ControlData()
      if self.depth is None:
        self.depth = srmauv_msgs.msg.ControlData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.forward.total, _x.forward.p, _x.forward.i, _x.forward.d, _x.heading.total, _x.heading.p, _x.heading.i, _x.heading.d, _x.sidemove.total, _x.sidemove.p, _x.sidemove.i, _x.sidemove.d, _x.pitch.total, _x.pitch.p, _x.pitch.i, _x.pitch.d, _x.roll.total, _x.roll.p, _x.roll.i, _x.roll.d, _x.depth.total, _x.depth.p, _x.depth.i, _x.depth.d,) = _struct_24f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_24f.pack(_x.forward.total, _x.forward.p, _x.forward.i, _x.forward.d, _x.heading.total, _x.heading.p, _x.heading.i, _x.heading.d, _x.sidemove.total, _x.sidemove.p, _x.sidemove.i, _x.sidemove.d, _x.pitch.total, _x.pitch.p, _x.pitch.i, _x.pitch.d, _x.roll.total, _x.roll.p, _x.roll.i, _x.roll.d, _x.depth.total, _x.depth.p, _x.depth.i, _x.depth.d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.forward is None:
        self.forward = srmauv_msgs.msg.ControlData()
      if self.heading is None:
        self.heading = srmauv_msgs.msg.ControlData()
      if self.sidemove is None:
        self.sidemove = srmauv_msgs.msg.ControlData()
      if self.pitch is None:
        self.pitch = srmauv_msgs.msg.ControlData()
      if self.roll is None:
        self.roll = srmauv_msgs.msg.ControlData()
      if self.depth is None:
        self.depth = srmauv_msgs.msg.ControlData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.forward.total, _x.forward.p, _x.forward.i, _x.forward.d, _x.heading.total, _x.heading.p, _x.heading.i, _x.heading.d, _x.sidemove.total, _x.sidemove.p, _x.sidemove.i, _x.sidemove.d, _x.pitch.total, _x.pitch.p, _x.pitch.i, _x.pitch.d, _x.roll.total, _x.roll.p, _x.roll.i, _x.roll.d, _x.depth.total, _x.depth.p, _x.depth.i, _x.depth.d,) = _struct_24f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_24f = struct.Struct("<24f")
