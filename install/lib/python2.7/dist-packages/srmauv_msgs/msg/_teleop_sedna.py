# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srmauv_msgs/teleop_sedna.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class teleop_sedna(genpy.Message):
  _md5sum = "730b38a77be8eed770bb99b2595e6948"
  _type = "srmauv_msgs/teleop_sedna"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool enable
bool tune
bool torpedo
bool dropper
bool depth_enable
bool pid_enable

int16 forward_speed
int16 sidemove_speed
int16 reverse_speed
int16 depth_setpoint
float32 heading_setpoint
int16 roll_setpoint
int16 pitch_setpoint

float32 sidemove_input
float32 forward_input
"""
  __slots__ = ['enable','tune','torpedo','dropper','depth_enable','pid_enable','forward_speed','sidemove_speed','reverse_speed','depth_setpoint','heading_setpoint','roll_setpoint','pitch_setpoint','sidemove_input','forward_input']
  _slot_types = ['bool','bool','bool','bool','bool','bool','int16','int16','int16','int16','float32','int16','int16','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable,tune,torpedo,dropper,depth_enable,pid_enable,forward_speed,sidemove_speed,reverse_speed,depth_setpoint,heading_setpoint,roll_setpoint,pitch_setpoint,sidemove_input,forward_input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(teleop_sedna, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.enable is None:
        self.enable = False
      if self.tune is None:
        self.tune = False
      if self.torpedo is None:
        self.torpedo = False
      if self.dropper is None:
        self.dropper = False
      if self.depth_enable is None:
        self.depth_enable = False
      if self.pid_enable is None:
        self.pid_enable = False
      if self.forward_speed is None:
        self.forward_speed = 0
      if self.sidemove_speed is None:
        self.sidemove_speed = 0
      if self.reverse_speed is None:
        self.reverse_speed = 0
      if self.depth_setpoint is None:
        self.depth_setpoint = 0
      if self.heading_setpoint is None:
        self.heading_setpoint = 0.
      if self.roll_setpoint is None:
        self.roll_setpoint = 0
      if self.pitch_setpoint is None:
        self.pitch_setpoint = 0
      if self.sidemove_input is None:
        self.sidemove_input = 0.
      if self.forward_input is None:
        self.forward_input = 0.
    else:
      self.enable = False
      self.tune = False
      self.torpedo = False
      self.dropper = False
      self.depth_enable = False
      self.pid_enable = False
      self.forward_speed = 0
      self.sidemove_speed = 0
      self.reverse_speed = 0
      self.depth_setpoint = 0
      self.heading_setpoint = 0.
      self.roll_setpoint = 0
      self.pitch_setpoint = 0
      self.sidemove_input = 0.
      self.forward_input = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6B4hf2h2f.pack(_x.enable, _x.tune, _x.torpedo, _x.dropper, _x.depth_enable, _x.pid_enable, _x.forward_speed, _x.sidemove_speed, _x.reverse_speed, _x.depth_setpoint, _x.heading_setpoint, _x.roll_setpoint, _x.pitch_setpoint, _x.sidemove_input, _x.forward_input))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.enable, _x.tune, _x.torpedo, _x.dropper, _x.depth_enable, _x.pid_enable, _x.forward_speed, _x.sidemove_speed, _x.reverse_speed, _x.depth_setpoint, _x.heading_setpoint, _x.roll_setpoint, _x.pitch_setpoint, _x.sidemove_input, _x.forward_input,) = _struct_6B4hf2h2f.unpack(str[start:end])
      self.enable = bool(self.enable)
      self.tune = bool(self.tune)
      self.torpedo = bool(self.torpedo)
      self.dropper = bool(self.dropper)
      self.depth_enable = bool(self.depth_enable)
      self.pid_enable = bool(self.pid_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6B4hf2h2f.pack(_x.enable, _x.tune, _x.torpedo, _x.dropper, _x.depth_enable, _x.pid_enable, _x.forward_speed, _x.sidemove_speed, _x.reverse_speed, _x.depth_setpoint, _x.heading_setpoint, _x.roll_setpoint, _x.pitch_setpoint, _x.sidemove_input, _x.forward_input))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.enable, _x.tune, _x.torpedo, _x.dropper, _x.depth_enable, _x.pid_enable, _x.forward_speed, _x.sidemove_speed, _x.reverse_speed, _x.depth_setpoint, _x.heading_setpoint, _x.roll_setpoint, _x.pitch_setpoint, _x.sidemove_input, _x.forward_input,) = _struct_6B4hf2h2f.unpack(str[start:end])
      self.enable = bool(self.enable)
      self.tune = bool(self.tune)
      self.torpedo = bool(self.torpedo)
      self.dropper = bool(self.dropper)
      self.depth_enable = bool(self.depth_enable)
      self.pid_enable = bool(self.pid_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6B4hf2h2f = struct.Struct("<6B4hf2h2f")
