# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srmauv_msgs/thruster.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class thruster(genpy.Message):
  _md5sum = "58cf37a5ce4f852e59a4eb1cfea68751"
  _type = "srmauv_msgs/thruster"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 speed1
int16 speed2
int16 speed3
int16 speed4
int16 speed5
int16 speed6
int16 speed7
int16 speed8
"""
  __slots__ = ['speed1','speed2','speed3','speed4','speed5','speed6','speed7','speed8']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed1,speed2,speed3,speed4,speed5,speed6,speed7,speed8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(thruster, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.speed1 is None:
        self.speed1 = 0
      if self.speed2 is None:
        self.speed2 = 0
      if self.speed3 is None:
        self.speed3 = 0
      if self.speed4 is None:
        self.speed4 = 0
      if self.speed5 is None:
        self.speed5 = 0
      if self.speed6 is None:
        self.speed6 = 0
      if self.speed7 is None:
        self.speed7 = 0
      if self.speed8 is None:
        self.speed8 = 0
    else:
      self.speed1 = 0
      self.speed2 = 0
      self.speed3 = 0
      self.speed4 = 0
      self.speed5 = 0
      self.speed6 = 0
      self.speed7 = 0
      self.speed8 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8h.pack(_x.speed1, _x.speed2, _x.speed3, _x.speed4, _x.speed5, _x.speed6, _x.speed7, _x.speed8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.speed1, _x.speed2, _x.speed3, _x.speed4, _x.speed5, _x.speed6, _x.speed7, _x.speed8,) = _struct_8h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8h.pack(_x.speed1, _x.speed2, _x.speed3, _x.speed4, _x.speed5, _x.speed6, _x.speed7, _x.speed8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.speed1, _x.speed2, _x.speed3, _x.speed4, _x.speed5, _x.speed6, _x.speed7, _x.speed8,) = _struct_8h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8h = struct.Struct("<8h")
