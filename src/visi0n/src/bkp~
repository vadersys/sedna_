cv::Size size(3,3);  
 	cv::GaussianBlur(cv_normal_ptr->image,cv_normal_ptr->image,size,0);  
 	adaptiveThreshold(cv_normal_ptr->image, cv_normal_ptr->image,255,CV_ADAPTIVE_THRESH_MEAN_C, CV_THRESH_BINARY,75,10);  
 	cv::bitwise_not(cv_normal_ptr->image, cv_normal_ptr->image);  
	cv::vector<cv::Vec4i> lines;  
 	HoughLinesP(cv_normal_ptr->image, lines, 1, CV_PI/180, 80, 100, 10);  
	cv::threshold(cv_grey_ptr->image, cv_grey_ptr->image, threshold_value,255,threshold_type );
	cv::threshold(cv_grey_ptr->image , cv_grey_ptr->image , 100, 255, cv::THRESH_BINARY);
	cv_normal_ptr->image.copyTo(cv_added_ptr->image,cv_grey_ptr->image);
	cvtColor(cv_added_ptr->image, HSVImage, CV_BGR2HSV);
	cv::inRange(HSVImage, cv::Scalar(HMIN,SMIN,VMIN), cv::Scalar(HMAX,SMAX,VMAX), ThreshImage);
	cv_added_ptr->image.setTo(cv::Scalar(0,0,0), ThreshImage);
	cvtColor(cv_added_ptr->image, cv_added_ptr->image, CV_HSV2BGR);
	cvtColor(cv_added_ptr->image,cv_added_ptr->image,CV_BGR2GRAY);
	GaussianBlur(cv_added_ptr->image, cv_added_ptr->image, cv::Size(9, 9), 2, 2 );
	

	cv::Mat erosion_element = getStructuringElement( cv::MORPH_RECT,
                                       cv::Size( 2*erosion_val + 1, 2*erosion_val+1 ),
                                       cv::Point( erosion_val, erosion_val ) );
	cv::Mat dilation_element = getStructuringElement( cv::MORPH_RECT,
                                       cv::Size( 2*dilation_val + 1, 2*dilation_val+1 ),
                                       cv::Point( dilation_val, dilation_val ) );
	erode( cv_added_ptr->image, cv_added_ptr->image, erosion_element );
	dilate( cv_added_ptr->image,cv_added_ptr->image, dilation_element );
	Canny( cv_added_ptr->image, canny_output, thresh_val, thresh_val*2, 3 );
	findContours(canny_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );
	for( int i = 0; i< contours.size(); i++ )
     	{
       		area=contourArea( contours[i],false);  
       		if(area>largest_area)
		{
       			largest_area=area;
       			largest_contour_index=i;
       			bounding_rect=boundingRect(contours[i]);
		}
     	}
	cv::Scalar color( 255,255,255);
	rectangle(cv_added_ptr->image, bounding_rect,  cv::Scalar(0,255,0),1, 8,0);  

 	//drawContours( cv_added_ptr->image, contours,largest_contour_index, color, CV_FILLED, 8, hierarchy );}
	result = cvApproxPoly(contours, sizeof(CvContour), storage, CV_POLY_APPROX_DP, cvContourPerimeter(contours)*0.02, 0);

	cv::vector<cv::Vec3f> circles;
	ROS_INFO("STARTING TRANSFORM");
  	HoughCircles( cv_added_ptr->image, circles, CV_HOUGH_GRADIENT, 2, 100, 100, 100, 0, 1000 );
	ROS_INFO("ENDING TRANSFORM");
  	ROS_INFO("CIRCLE : %d",circles.size());
  	for( size_t i = 0; i < circles.size(); i++ )
	{
      		cv::Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
      		int radius = cvRound(circles[i][2]);

      		// circle center
      		circle( cv_added_ptr->image, center, 3, cv::Scalar(255,255,255), -1, 8, 0 );
      		// circle outline
      		circle( cv_added_ptr->image, center, radius, cv::Scalar(0,0,0), 3, 8, 0 );
  	}
	//cv_added_ptr->image = canny_output;
	cvtColor(cv_added_ptr->image,cv_added_ptr->image,CV_GRAY2BGR);
